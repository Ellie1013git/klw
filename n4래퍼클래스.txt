4.래퍼 클래스 (Wrapper Class)
래퍼 클래스는 기본 데이터형을 객체로 다루기 위해 제공되는 클래스예요. 자바스크립트의 기본 데이터형은 숫자(Number), 문자열(String), 불린(Boolean) 등이 있는데, 이런 데이터형을 다루기 위한 특별한 기능을 가진 객체로 변환하고 싶을 때 래퍼 클래스를 사용해요. 자바스크립트는 이를 자동으로 처리해주는 기능이 있어서, 개발자가 직접 사용해야 하는 경우는 거의 없지만, 원리를 알면 유용해요.

예시: 숫자와 문자열 래퍼 클래스
let num = 42; // 기본형 숫자
console.log(num.toString()); // "42"라고 출력됨. 숫자가 문자열로 변환됨.

let str = "Hello, world!"; // 기본형 문자열
console.log(str.toUpperCase()); // "HELLO, WORLD!"라고 출력됨. 문자열이 대문자로 변환됨.

자바스크립트에서는 num과 str이 각각 Number와 String 객체처럼 행동해요. 예를 들어 toString()과 toUpperCase() 같은 메소드를 사용해 문자열이나 숫자를 쉽게 다룰 수 있죠. 사실 num과 str은 기본 데이터형이지만, 필요할 때 자바스크립트가 자동으로 Number나 String 객체로 감싸서(박싱이라고 해요) 메소드를 사용할 수 있게 해줘요.

자바스크립트에서의 래퍼 클래스 종류
Number: 숫자형을 객체로 다루고 싶을 때 사용.
String: 문자열형을 객체로 다루고 싶을 때 사용.
Boolean: 불린형을 객체로 다루고 싶을 때 사용.
이러한 래퍼 클래스를 직접 만드는 경우는 드물지만, 자바스크립트가 자동으로 데이터형을 객체처럼 다루기 때문에 toUpperCase()나 toString() 같은 메소드를 사용할 수 있는 거예요.

4-1. 기본 데이터형과 래퍼 클래스의 차이
래퍼 클래스는 자바스크립트의 기본 데이터형(예: 숫자, 문자열, 불린 값)을 객체처럼 다룰 수 있도록 해주는 개념이에요. 기본 데이터형을 래퍼 객체로 감싸서 객체처럼 사용하게 해주기 때문에, 래퍼 클래스 또는 래퍼 객체라고 불러요. 이를 통해 기본 데이터형에 다양한 메소드와 기능을 사용할 수 있어요.

자바스크립트에는 기본 데이터형과 객체형이 있어요. 기본 데이터형은 단순한 값이고, 객체형은 속성과 메소드를 가진 복잡한 데이터예요. 기본 데이터형에는 숫자, 문자열, 불린 값 등이 포함되고, 객체형에는 배열, 함수, 사용자 정의 객체 등이 있어요.

기본 데이터형 vs 객체형
기본 데이터형: 단순한 값으로 이루어져 있고, 속성과 메소드가 없어요.
객체형: 속성과 메소드를 가질 수 있어서 다양한 기능을 활용할 수 있어요.
자바스크립트는 Number, String, Boolean 같은 래퍼 클래스를 제공해요. 그래서 기본 데이터형인 숫자, 문자열, 불린 값도 객체처럼 다룰 수 있도록 해줘요.

4-2. 래퍼 클래스가 어떻게 작동하나요?
자바스크립트는 기본 데이터형에 객체 메소드를 사용하려고 하면, 자동으로 해당 값을 래퍼 객체로 변환하는 과정을 거쳐요. 이걸 **박싱(Boxing)**이라고 해요. 기본 데이터형을 래퍼 클래스로 감싸 객체처럼 다룰 수 있게 하고, 사용이 끝나면 **언박싱(Unboxing)**하여 원래의 기본 데이터형으로 되돌려요. 이 과정은 자바스크립트가 자동으로 처리해 주기 때문에 개발자가 특별히 신경 쓸 필요는 없어요.

예시: 래퍼 클래스 자동 변환
let num = 123;          // 기본형 숫자
console.log(num.toString()); // 래퍼 클래스를 사용해 문자열로 변환, "123" 출력

위 코드에서 num은 숫자(기본형)이지만, toString() 메소드를 호출하자 자바스크립트가 자동으로 Number 래퍼 객체로 변환해주고, toString() 메소드를 사용할 수 있게 해줘요.

래퍼 클래스와 객체화 예시
아래 예시는 기본 데이터형을 명시적으로 객체로 변환하는 방법이에요. 이 경우, new 키워드를 사용해 래퍼 클래스를 생성할 수 있어요.

let numObject = new Number(123); // 숫자 123을 객체로 만듦
console.log(typeof numObject);    // "object"라고 출력됨
console.log(numObject.toFixed(2)); // "123.00"라고 출력됨, 객체의 메소드 사용

하지만 일반적으로는 new Number, new String 등으로 래퍼 클래스를 직접 사용하는 경우는 드물어요. 대부분 자동 박싱 기능을 사용하면 충분해요.

4-3.자주 쓰이는 래퍼 클래스와 메소드
1)Number 클래스

숫자를 다룰 때 다양한 메소드를 제공해요.
예: toFixed()(소수점 자리수 지정), toString()(문자열로 변환), toExponential()(지수 표기법으로 변환) 등.

let num = 12.3456;
console.log(num.toFixed(2)); // "12.35"라고 출력, 소수점 둘째 자리까지 표시

2)String 클래스

문자열을 다룰 때 유용한 메소드를 제공해요.
예: toUpperCase()(모두 대문자로 변환), toLowerCase()(모두 소문자로 변환), substring()(일부 문자열 추출) 등.

let str = "hello";
console.log(str.toUpperCase()); // "HELLO"라고 출력

3)Boolean 클래스

불린 값을 객체처럼 다룰 수 있게 해요.
불린 값을 객체로 만들어 toString() 같은 메소드를 사용할 수 있어요.

let bool = true;
console.log(bool.toString()); // "true"라고 출력

4-4.왜 래퍼 클래스가 필요할까요?
래퍼 클래스는 기본 데이터형이 객체처럼 행동할 수 있도록 기능을 확장해 줘요. 숫자, 문자열, 불린 값을 객체처럼 다룰 수 있게 하여 다양한 메소드와 기능을 사용할 수 있게 해주죠. 예를 들어, 문자열을 대문자로 변환하거나 숫자의 소수점 자릿수를 맞추는 기능은 래퍼 클래스 덕분에 가능해요.

주의점
래퍼 클래스를 명시적으로 사용하는 것은 추천되지 않아요. 예를 들어, new Number(5)보다는 5 자체를 쓰는 것이 좋아요. 명시적으로 래퍼 객체를 만들 경우, 기본형이 아닌 객체형이 되기 때문에 데이터 비교나 동작에서 문제가 발생할 수 있어요.