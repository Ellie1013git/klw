1. 개념
2. 메서드 :자바스크립트의 배열(Array) 메서드는 배열을 다루기 쉽게 만들어주는 도구들이에요. 하나씩 간단하게 설명해볼게요.
splice: 배열에서 추가하거나 삭제하기
slice: 배열의 일부분 가져오기
concat: 배열 합치기
toString: 배열을 문자열로 변환
join: 배열을 문자열로 변환하며 구분자 설정
at(인덱스): 배열에서 해당 위치에 있는 요소를 가져와요.

1)splice
설명: 배열에서 특정 위치에 있는 요소를 추가하거나 삭제할 때 사용해요.

예시: 만약 ["사과", "바나나", "체리"]라는 배열이 있을 때, 가운데에 "오렌지"를 추가하고 싶다면, splice를 사용할 수 있어요.
<script>
let fruits = ["사과", "바나나", "체리"];
fruits.splice(1, 0, "오렌지"); // 1번째 자리에 "오렌지" 추가
// 결과: ["사과", "오렌지", "바나나", "체리"]
</script>

여기서 splice(1, 0, "오렌지")는 첫 번째 자리에서 아무 것도 삭제하지 않고(0) "오렌지"를 넣으라는 뜻이에요.

2)slice
설명: 배열의 일부분을 잘라서 새 배열로 만들 때 사용해요. 원래 배열은 그대로 남아 있어요.

예시: ["사과", "바나나", "체리"] 중 앞의 두 개만 가져오고 싶다면 slice를 사용해요.
<script>
let fruits = ["사과", "바나나", "체리"];
let someFruits = fruits.slice(0, 2); // 0번째부터 2번째 전까지 잘라내기
// 결과: ["사과", "바나나"]
</script>

3)concat
설명: 배열을 합칠 때 사용해요. 기존 배열을 바꾸지 않고, 새로운 배열을 만들어요.

예시: ["사과"]와 ["바나나", "체리"]를 하나로 합치고 싶다면 concat을 사용해요.
let fruits1 = ["사과"];
let fruits2 = ["바나나", "체리"];
let allFruits = fruits1.concat(fruits2);
// 결과: ["사과", "바나나", "체리"]

4)toString
설명: 배열을 문자열(문장처럼 생긴 형태)로 바꿔줘요. 배열에 있는 모든 요소를 이어서 하나의 문자열로 만드는 거죠.

예시: ["사과", "바나나", "체리"]를 문자열로 바꾸면 어떻게 될까요?
let fruits = ["사과", "바나나", "체리"];
let fruitString = fruits.toString();
// 결과: "사과,바나나,체리"

5)join
설명: 배열을 문자열로 바꾸는 것은 toString과 비슷한데, 원하는 구분자를 넣을 수 있어요.

예시: ["사과", "바나나", "체리"]를 한 문장으로 합칠 때 join을 사용해서 " - "로 구분해 줄 수 있어요.
let fruits = ["사과", "바나나", "체리"];
let fruitString = fruits.join(" - ");
// 결과: "사과 - 바나나 - 체리"


6)at 메서드는 배열에서 특정 위치의 요소를 가져올 때 사용해요. 특히, at는 음수 인덱스를 쓸 수 있는 게 특징이에요. 음수 인덱스는 배열의 끝에서부터 요소를 세는 방법이죠.
배열.at(인덱스);

예시
양수 인덱스를 사용해서 요소를 가져오기:
let fruits = ["사과", "바나나", "체리"];
let firstFruit = fruits.at(0); // 첫 번째 요소 가져오기
// 결과: "사과"

음수 인덱스를 사용해서 뒤에서부터 요소 가져오기:
let fruits = ["사과", "바나나", "체리"];
let lastFruit = fruits.at(-1); // 끝에서 첫 번째 요소 가져오기
// 결과: "체리"

왜 at을 사용하는가?
음수 인덱스를 사용할 수 있다: 배열의 끝에서부터 요소를 쉽게 가져올 수 있어요. 예를 들어 배열.at(-1)은 배열의 마지막 요소를 가져와요. 만약 at을 쓰지 않고 배열의 마지막 요소에 접근하려면 배열[배열.length - 1]과 같이 코드가 길어져요.

let fruits = ["사과", "바나나", "체리"];
let lastFruit = fruits.at(-1); // "체리"

코드 가독성 향상: at을 사용하면 코드가 읽기 쉽고 명확해요. 끝에서 몇 번째 요소를 가져오는지 -1, -2와 같이 쉽게 알 수 있어요.

안전성: at은 배열이 비었을 때 undefined를 반환해요. 예를 들어 배열.at(-1)을 사용하면, 비어 있는 배열에서도 오류 없이 undefined를 반환하죠.

8) forEach: 각 요소에 대해 반복 작업
9)map: 각 요소를 변형해 새로운 배열 생성
10)filter: 조건에 맞는 요소만 새 배열로 생성
11)reduce: 배열의 모든 요소를 하나의 값으로 합침

12)그 외
find: 조건에 맞는 첫 번째 요소 찾기
findIndex: 조건에 맞는 첫 번째 요소의 인덱스 찾기
some: 하나라도 조건에 맞는지 확인
every: 모든 요소가 조건에 맞는지 확인
includes: 배열에 특정 값이 있는지 확인
sort: 배열 요소 정렬



